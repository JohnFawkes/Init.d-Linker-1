#!/sbin/sh
##########################################################################################
#
# Magisk Module Template Install Script
# by topjohnwu
#
##########################################################################################

# Detect whether in boot mode
ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true || BOOTMODE=false
$BOOTMODE || ps -A 2>/dev/null | grep zygote | grep -v grep >/dev/null && BOOTMODE=true

# This path should work in any cases
TMPDIR=/dev/tmp
MOUNTPATH=$TMPDIR/magisk_img
$BOOTMODE && IMG=/data/magisk_merge.img || IMG=/data/magisk.img
INSTALLER=$TMPDIR/install
MAGISKBIN=/data/magisk

# Default permissions
umask 022

# Initial cleanup
rm -rf $TMPDIR 2>/dev/null
mkdir -p $INSTALLER
	   
##########################################################################################
# Environment
##########################################################################################

OUTFD=$2
ZIP=$3

# echo before loading util_functions
ui_print() { echo "$1"; }

require_new_magisk() {
  ui_print "***********************************"
  ui_print "! $MAGISKBIN isn't setup properly!"
  ui_print "!  Please install Magisk v14.0+!"
  ui_print "***********************************"
  exit 1
}

mount_partitions_old() { 
  # Check A/B slot
  SLOT=`getprop ro.boot.slot_suffix`
  [ -z $SLOT ] || ui_print "- A/B partition detected, current slot: $SLOT"
  ui_print "- Mounting /system, /vendor"
  is_mounted /system || [ -f /system/build.prop ] || mount -o ro /system 2>/dev/null
  if ! is_mounted /system && ! [ -f /system/build.prop ]; then
    SYSTEMBLOCK=`find /dev/block -iname system$SLOT | head -n 1`
    mount -t ext4 -o ro $SYSTEMBLOCK /system
  fi
  is_mounted /system || [ -f /system/build.prop ] || abort "! Cannot mount /system"
  cat /proc/mounts | grep -E '/dev/root|/system_root' >/dev/null && SKIP_INITRAMFS=true || SKIP_INITRAMFS=false
  if [ -f /system/init.rc ]; then
    SKIP_INITRAMFS=true
    mkdir /system_root 2>/dev/null
    mount --move /system /system_root
    mount -o bind /system_root/system /system
  fi
  $SKIP_INITRAMFS && ui_print "- Device skip_initramfs detected"
  if [ -L /system/vendor ]; then
    # Seperate /vendor partition
    is_mounted /vendor || mount -o ro /vendor 2>/dev/null
    if ! is_mounted /vendor; then
      VENDORBLOCK=`find /dev/block -iname vendor$SLOT | head -n 1`
      mount -t ext4 -o ro $VENDORBLOCK /vendor
    fi
    is_mounted /vendor || abort "! Cannot mount /vendor"
  fi
}

mount /data 2>/dev/null

# Utility functions must exist
[ -f $MAGISKBIN/util_functions.sh ] || require_new_magisk
# Load utility fuctions
. $MAGISKBIN/util_functions.sh

get_outfd

# Check the min magisk version and mount partitions
if [ ! -z $MAGISK_VER_CODE ] && [ $MAGISK_VER_CODE -ge 1400 ]; then
  if [ $MAGISK_VER_CODE -ge 1410 ]; then
    mount_partitions
  else
    mount_partitions_old
  fi
else
  require_new_magisk
fi

# Magisk clean flash support
if [ -e /data/magisk -a ! -e /data/magisk.img ]; then
  /system/bin/make_ext4fs -l 64M /data/magisk.img
fi

$BOOTMODE && ! is_mounted /magisk && abort "! Magisk is not activated!"
[ ! -f /system/build.prop ] && abort "! /system could not be mounted!"

# Detect version and architecture
api_level_arch_detect

# You can get the Android API version from $API, the CPU architecture from $ARCH
# Useful if you are creating Android version / platform dependent mods

# We need busybox/binaries to be setup
$BOOTMODE && boot_actions || recovery_actions

##########################################################################################
# Preparation
##########################################################################################

# Extract common files
unzip -o "$ZIP" module.prop config.sh 'common/*' -d $INSTALLER 2>/dev/null

[ ! -f $INSTALLER/config.sh ] && abort "! Unable to extract zip file!"
# Load configurations
. $INSTALLER/config.sh

MODID=`grep_prop id $INSTALLER/module.prop`
MODPATH=$MOUNTPATH/$MODID

# Print mod name
print_modname

# Please leave this message in your flashable zip for credits :)
ui_print "******************************"
ui_print "Powered by Magisk (@topjohnwu)"
ui_print "******************************"

##########################################################################################
# Install
##########################################################################################

request_zip_size_check "$ZIP"

if [ -f "$IMG" ]; then
  ui_print "- Found $IMG"
  image_size_check $IMG
  if [ "$reqSizeM" -gt "$curFreeM" ]; then
    newSizeM=$(((reqSizeM + curUsedM) / 32 * 32 + 64))
    ui_print "- Resizing $IMG to ${newSizeM}M"
    $MAGISKBIN/magisk --resizeimg $IMG $newSizeM
  fi
else
  newSizeM=$((reqSizeM / 32 * 32 + 64));
  ui_print "- Creating $IMG with size ${newSizeM}M"
  $MAGISKBIN/magisk --createimg $IMG $newSizeM
fi

ui_print "- Mounting $IMG to $MOUNTPATH"
MAGISKLOOP=`$MAGISKBIN/magisk --mountimg $IMG $MOUNTPATH`
is_mounted $MOUNTPATH || abort "! $IMG mount failed..."

# Detect if mod is already installed
$BOOTMODE && MOD_VER=/magisk/$MODID/module.prop || MOD_VER=$MODPATH/module.prop
if [ -f "$MOD_VER" ]; then
  if [ $(grep "versionCode=" $MOD_VER | sed 's/^.*=//') -ge $(grep "versionCode=" $INSTALLER/module.prop | sed 's/^.*=//') ]; then
    ACTION="Uninstall"
  else
    ACTION="Install"
  fi
else
  ACTION="Install"
fi

if [ "$ACTION" == "Install" ]; then

  # Create mod paths
  rm -rf $MODPATH 2>/dev/null
  mkdir -p $MODPATH

  # Copy files
  ui_print "- Extracting module files"
  # Remove placeholder (people always forgot to remove it...)
  # rm -f $MODPATH/system/placeholder 2>/dev/null
  # unzip -o "$ZIP" 'system/*' -d $MODPATH 2>/dev/null
  
  # Set .core path and make folders for magisk clean flash support
  $BOOTMODE && CORE=/magisk/.core || CORE=$MOUNTPATH/.core
  mkdir -p $CORE/post-fs-data.d $CORE/service.d
  
  # Handle replace folders
  for TARGET in $REPLACE; do
    mktouch $MODPATH$TARGET/.replace
  done

  # Auto Mount
  $AUTOMOUNT && touch $MODPATH/auto_mount

  # prop files
  $PROPFILE && cp -af $INSTALLER/common/system.prop $MODPATH/system.prop

  # Module info
  cp -af $INSTALLER/module.prop $MODPATH/module.prop
  if $BOOTMODE; then
    # Update info for Magisk Manager
    mktouch /magisk/$MODID/update
    cp -af $INSTALLER/module.prop /magisk/$MODID/module.prop
  fi

  # post-fs-data mode scripts
  test $POSTFSDATA && cp -af $INSTALLER/common/post-fs-data.sh $CORE/post-fs-data.d/0000initdlinker.sh

  # service mode scripts
  test $LATESTARTSERVICE && cp -af $INSTALLER/common/service.sh $CORE/service.d/0000initdlinker.sh

  ui_print "- Setting permissions"
  set_permissions

else

  # Uninstall module
  ui_print "- ! Current or Newer Version of Module Detected ! Uninstalling -"
  rm -rf $MODPATH 2>/dev/null
  rm -rf /magisk/$MODID

fi
##########################################################################################
# Finalizing
##########################################################################################

$MAGISKBIN/magisk --umountimg $MOUNTPATH $MAGISKLOOP

# Shrink the image if possible
image_size_check $IMG
newSizeM=$((curUsedM / 32 * 32 + 64))
if [ $curSizeM -gt $newSizeM ]; then
  ui_print "- Shrinking $IMG to ${newSizeM}M"
  $MAGISKBIN/magisk --resizeimg $IMG $newSizeM
fi

$BOOTMODE || recovery_cleanup
rm -rf $TMPDIR

ui_print "- Done"
exit 0
